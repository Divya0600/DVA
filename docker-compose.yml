version: '3.8'

services:
  # PostgreSQL database
  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=pipeline_migration
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Django backend
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: >
      bash -c "python manage.py migrate &&
               python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings.development
      - DATABASE_URL=postgres://postgres:postgres@db:5432/pipeline_migration
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery worker
  celery:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: celery -A core worker -l info
    volumes:
      - ./backend:/app
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings.development
      - DATABASE_URL=postgres://postgres:postgres@db:5432/pipeline_migration
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started

  # React frontend
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000/api
    command: npm start
    depends_on:
      - backend

volumes:
  postgres_data:
